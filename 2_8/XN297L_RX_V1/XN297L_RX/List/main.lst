C51 COMPILER V9.01   MAIN                                                                  02/08/2021 14:10:08 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\main.obj
COMPILER INVOKED BY: D:\Program Files\C51\BIN\C51.EXE Code\main.c BROWSE INCDIR(..\Include) DEFINE(FOSC_160000) DEBUG OB
                    -JECTEXTEND PRINT(.\List\main.lst) OBJECT(.\Output\main.obj)

line level    source

   1          
   2          //Fcn description:
   3          //Single Master,single slave architecture.
   4          //Transmit data consecutively through MOSI pin, 
   5          //SPIF will be set after completion of data transfer,
   6          //clear SPIF and start a new transmission.
   7          
   8          #include "N76E003.h"//Definitions for SFRs and bits in SFRs 
   9                              //which end their addresses as 0H or 8H. 
  10          #include "SFR_Macro.h"//Setting and clring for each individual bit.
  11          #include "Function_define.h"//Fcn definitions for the chip 
  12          #include "Common.h"     //Fcn declarations for UART 
  13          #include "Delay.h"//Fcn declarations for delay.
  14          #include "XN297L.h"
  15          
  16          //All the hardware registers in XN297L are mapped into the RAM of MCU,
  17          //thus,modify the mapping register first,then send the content to
  18          //XN297L through SPI.
  19          extern uint8_t CONFIG_mapping;
  20          extern uint8_t SETUP_AW_mapping;
  21          extern uint8_t RF_CH_mapping;
  22          extern uint8_t RF_SETUP_mapping;
  23          extern uint8_t STATUS_mapping;
  24          extern uint8_t TX_addr[5];
  25          extern uint8_t RX_addr_P0[5];
  26          extern uint8_t EN_AA_mapping;
  27          extern uint8_t SETUP_RETR_mapping;
  28          
  29          
  30          //bit capature_flag;
  31          //Upload every 100ms.
  32          //bit serial_port_upload_flag;
  33          //uint16_t  serial_port_upload_count;
  34          
  35          uint8_t rcv_result;//Store the received results.
  36          uint8_t reg_state;//read in the SFRs.
  37          bit rf_rcv_data_flag;
  38          
  39           void main(void)
  40          {
  41   1       Set_All_GPIO_Quasi_Mode;
  42   1      
  43   1              //The SPI operates as a Master:
  44   1              //Pin configuration.
  45   1      //    P15_Quasi_Mode; // P15 (SS) Quasi mode
  46   1      //    P10_Quasi_Mode; // P10(SPCLK) Quasi mode
  47   1      //    P00_Quasi_Mode; // P00 (MOSI) Quasi mode
  48   1      //    P01_Quasi_Mode; // P01 (MISO) Quasi mode
  49   1              
  50   1      //Assign the default value to the RAM-mapped registers.
  51   1      //These values are identical with the reset values of the reg. in XN297L.
  52   1      CONFIG_mapping=EN_CRC;//Only CRC is enabled.
  53   1      SETUP_AW_mapping=AW_5_BYTES;
  54   1      RF_CH_mapping=0x4e;
C51 COMPILER V9.01   MAIN                                                                  02/08/2021 14:10:08 PAGE 2   

  55   1      RF_SETUP_mapping=0x3f;
  56   1      STATUS_mapping=0x0e;    
  57   1      EN_AA_mapping=1;
  58   1      SETUP_RETR_mapping=0x03;
  59   1      
  60   1              // SPI in Master mode
  61   1              set_MSTR;
  62   1          
  63   1      ///*****************************************************************************************
  64   1      //* For SPI INIT setting 
  65   1      //*****************************************************************************************/
  66   1      //#define               SPICLK_DIV2                     clr_SPR0;clr_SPR1
  67   1      //#define               SPICLK_DIV4                     set_SPR0;clr_SPR1
  68   1      //#define               SPICLK_DIV8                     clr_SPR0;set_SPR1
  69   1      //#define               SPICLK_DIV16            set_SPR0;set_SPR1       
  70   1              SPICLK_DIV16;//SPI clk rate @1Mbps
  71   1              
  72   1              //Configure SS pin 
  73   1              //SS input for mode fault detection.
  74   1              //clr_DISMODF;
  75   1              
  76   1              // SS  as General purpose I/O
  77   1          set_DISMODF;  
  78   1          clr_SSOE;
  79   1              
  80   1          //Automatic SS output.
  81   1              //set_DISMODF; 
  82   1          //set_SSOE;
  83   1      
  84   1         //Set the data format and the clk format of SPI
  85   1          //By default, SPI data is transferred MSB first
  86   1           clr_LSBFE; 
  87   1          //Set the idle state level of SPICLK 
  88   1           clr_CPOL; // The SPI clock is low in idle mode
  89   1               // The data is sample on the first edge of SPI clock
  90   1           clr_CPHA; 
  91   1      
  92   1              clr_SPIF;
  93   1           //Enable_SPI_Interrupt; 
  94   1              // Enable SPI function
  95   1          set_SPIEN;            
  96   1              
  97   1      //RF_RX Usage:
  98   1      //After power on reset,it'll take 10MS until rf module switches into power-down mode,
  99   1      //thus,at least 10MS delay is required before the initial procedure.
 100   1      CE=0;//CE is only activated during transmission and receiving.
 101   1      Timer3_Delay1ms(10);
 102   1       XN297L_software_reset();
 103   1       XN297L_reset_release();
 104   1      
 105   1      flush_RX_FIFO();
 106   1      //Clear interrupt flag.
 107   1      //clr_data_rcv_interrupt_flag();
 108   1      clear_STATUS_register();
 109   1      //Open the receiving channel.
 110   1      //Use the default channel0.//EN_RXADDR 
 111   1      disable_pipe0_auto_ack();//EN_AA
 112   1      //disable_auto_retransmit();//SETUP_RETR
 113   1      
 114   1      setup_address_witdth(AW_3_BYTES);//SETUP_AW
 115   1      set_RX_address_P0(RX_addr_P0);
 116   1      
C51 COMPILER V9.01   MAIN                                                                  02/08/2021 14:10:08 PAGE 3   

 117   1      set_RX_payload_width(1);//RX_PW_P0
 118   1      
 119   1      set_frequency_channel(2450);//RF_CH
 120   1      set_spi_data_rate(DR_1MBPS);
 121   1      set_rf_output_power(RF9DBM);//RF_SETUP
 122   1      
 123   1      
 124   1      config_DEM_CAL();
 125   1      config_RF_CAL2();
 126   1      config_DEM_CAL2();
 127   1      config_RF_CAL();
 128   1      config_BB_CAL();
 129   1      
 130   1      PWR_DN_mode_to_RX_mode();
 131   1      Timer3_Delay1ms(20);//Wait for stable 
 132   1      CE = 1; ////The signal is active high and used to activate the chip in RX or TX mode
 133   1              //The crystal oscillator starts to output to other modules and
 134   1              //has strong drive capability.
 135   1      Timer3_Delay1ms(10);//Wait for stable 
 136   1      
 137   1      
 138   1              // LED=1;
 139   1       InitialUART0_Timer1(9600);
 140   1      
 141   1      
 142   1       //TIMER2 generates interrupt every 1MS.
 143   1      //          TIMER2_DIV_4;
 144   1      //              TIMER2_Auto_Reload_Delay_Mode;
 145   1      //
 146   1      //              RCMP2L = TIMER_DIV4_VALUE_1ms;
 147   1      //              RCMP2H = TIMER_DIV4_VALUE_1ms>>8;
 148   1      //              TL2 = 0;
 149   1      //              TH2 = 0;        
 150   1      //        set_ET2;                                    // Enable Timer2 interrupt 
 151   1      //        set_TR2;  
 152   1      
 153   1      //Set P12 as falling edge triggered interrupt pin.
 154   1              Enable_INT_Port1;//Port1 is active as the 8-channel of pin interrupt.
 155   1          Enable_BIT2_FallEdge_Trig;
 156   1          PIF=0;   //Clr pin interrupt flag 
 157   1          set_EPI; // Enable pin interrupt
 158   1                   //Standby,wait for the external signal.
 159   1      
 160   1      
 161   1           EA=1;
 162   1      
 163   1         while(1)
 164   1         {
 165   2      
 166   2      
 167   2      //read_single_byte_register(CONFIG);
 168   2      //read_single_byte_register(STATUS);
 169   2      //read_single_byte_register(FIFO_STATUS);
 170   2       //read_single_byte_register(EN_RXADDR);//ERX_P0,enable data pipe0
 171   2      //read_single_byte_register(EN_AA);
 172   2      //             //ENAA_P0,enable auto-acknowledgement data pipe0.           
 173   2      //read_single_byte_register(SETUP_AW);//Address width
 174   2      //read_single_byte_register(RX_PW_P0);//receiving payload width      
 175   2      //read_single_byte_register(RF_CH);//Freq
 176   2      //read_single_byte_register(RF_SETUP);//SPI data rate & output power.
 177   2        
 178   2       
C51 COMPILER V9.01   MAIN                                                                  02/08/2021 14:10:08 PAGE 4   

 179   2       //Receiving procedure:
 180   2        //Standby,wait for the new data...
 181   2      
 182   2      
 183   2        if(rf_rcv_data_flag)
 184   2          {  rf_rcv_data_flag=0;
 185   3      
 186   3                rcv_result=read_RX_payload();
 187   3                 flush_RX_FIFO();
 188   3                 clear_STATUS_register();     
 189   3                 Send_Data_To_UART0(rcv_result);
 190   3              } 
 191   2      
 192   2      
 193   2      
 194   2      //Polling the data received interrupt flag in STATUS register.           
 195   2      //reg_state=read_single_byte_register(STATUS);
 196   2      //                      if(reg_state&RX_DR)
 197   2      //                         {  
 198   2      //                         rcv_result=read_RX_payload();
 199   2      //
 200   2      //                         flush_RX_FIFO();
 201   2      //                         clear_STATUS_register();                        
 202   2      //                         }
 203   2      
 204   2      //Serial port upload the data periodically.
 205   2      //                if(serial_port_upload_flag)
 206   2      //                {serial_port_upload_flag=0;
 207   2      //                Send_Data_To_UART0(rcv_result);
 208   2      //                 }
 209   2      
 210   2      //         if(capature_flag)
 211   2      //         {LED^=1;//Toggle LED
 212   2      //              Timer3_Delay1ms(200);
 213   2      //         }
 214   2         }
 215   1      
 216   1      
 217   1      
 218   1      }//End of main()
 219          
 220          
 221          /*********************************************************************************************************
             -***
 222          *    Timer2 interrupt subroutine
 223          **********************************************************************************************************
             -**/
 224          //void Timer2_ISR (void) interrupt 5
 225          //{
 226          //        clr_TF2; 
 227          //                                       //Clear Timer2 Interrupt Flag
 228          //  
 229          //  serial_port_upload_count++;
 230          //if(serial_port_upload_count==100)
 231          //{serial_port_upload_count=0;
 232          // serial_port_upload_flag=1;
 233          //}     
 234          //}
 235          
 236          
 237          void PinInterrupt_ISR (void) interrupt 7
 238          {
C51 COMPILER V9.01   MAIN                                                                  02/08/2021 14:10:08 PAGE 5   

 239   1              if(PIF&PIF2)
 240   1              {
 241   2          PIF &=~PIF2;                             //clear interrupt flag
 242   2      //When new data arrives RX_FIFO,an active low interrupt will generate on IRQ pin.
 243   2         //Inform the main processor to receive the incoming data.
 244   2           rf_rcv_data_flag=1;        
 245   2              }
 246   1      }
 247          
 248          
 249          //void SPI_ISR(void) interrupt 9 // Vecotr @  0x4B
 250          //{
 251          //    clr_SPIF;
 252          //      SS=1;
 253          //   //Retransmit the data.
 254          //   //SPDR=0x55;
 255          //   
 256          //}
 257          
 258          
 259          
 260          
 261          
 262          
 263          
 264          
 265          
 266          
 267          
 268          
 269          
 270          
 271          
 272          
 273          
 274          
 275          
 276          
 277          
 278          
 279          
 280          
 281          
 282          
 283          
 284          
 285          
 286          
 287          
 288          
 289          
 290          
 291          
 292          
 293          
 294          
 295                  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    236    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.01   MAIN                                                                  02/08/2021 14:10:08 PAGE 6   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
