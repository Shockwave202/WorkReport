C51 COMPILER V9.01   XN297L                                                                02/08/2021 13:45:37 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE XN297L
OBJECT MODULE PLACED IN .\Output\XN297L.obj
COMPILER INVOKED BY: D:\keil\C51\BIN\C51.EXE Code\XN297L.c BROWSE INCDIR(..\Include) DEFINE(FOSC_160000) DEBUG OBJECTEXT
                    -END PRINT(.\List\XN297L.lst) OBJECT(.\Output\XN297L.obj)

line level    source

   1          
   2          
   3          #include "N76E003.h" //SPDR
   4          
   5          #include "SFR_Macro.h" //clr_SPIF
   6          #include "Function_define.h" //SET_BIT7
   7          #include "XN297L.h" //W_REGISTER
   8          
   9          
  10          uint8_t rcv_result;//Store the received results.
  11          //All the hardware registers in XN297L are mapped into the RAM of MCU,
  12          //thus,modify the mapping register first,then send the content to
  13          //XN297L through SPI.
  14          uint8_t CONFIG_mapping;
  15          uint8_t SETUP_AW_mapping;
  16          uint8_t RF_CH_mapping;
  17          uint8_t RF_SETUP_mapping;
  18          uint8_t STATUS_mapping;
  19          uint8_t TX_addr[5]={1, 2, 3, 4, 5};
  20          uint8_t RX_addr_P0[5]= {1, 2, 3, 4, 5};
  21          uint8_t  BB_cal_data[]    = {0x12,0xED,0x67,0x9C,0x46};                               //1MÀŸ¬ ≈‰÷√
  22          uint8_t  RF_cal_data[]    = {0xF6,0x3F,0x5D};
  23          uint8_t  RF_cal2_data[]   = {0x45,0x21,0xef,0x2C,0x5A,0x40};
  24          uint8_t  Dem_cal_data[]   = {0x01};  
  25          uint8_t  Dem_cal2_data[]  = {0x0b,0xDF,0x02};
  26          uint8_t  EN_AA_mapping;  
  27          uint8_t  SETUP_RETR_mapping; 
  28          
  29          //Which register would u like to check?
  30          void read_single_byte_register(uint8_t addr)
  31          {
  32   1      //Inform the module that the MCU wants to read a specific register.
  33   1      SS = 0;
  34   1          SPDR = R_REGISTER + addr;
  35   1          while (!(SPSR & SET_BIT7))
  36   1              ;
  37   1          clr_SPIF;
  38   1      
  39   1      //Now,send an arbitrary data in exchange for the contents.
  40   1          SPDR = 0x55;
  41   1          while (!(SPSR & SET_BIT7))
  42   1              ;
  43   1          clr_SPIF;
  44   1        //Read in the contents.
  45   1        rcv_result=SPDR;
  46   1      
  47   1      //Work is done,return to the idle state.
  48   1      SS = 1;
  49   1      }
  50          
  51          //If a data package is sent to the TX FIFO,the transmitter will 
  52          //transmits the data package.
  53          void write_TX_payload(uint8_t payload)
  54          {
C51 COMPILER V9.01   XN297L                                                                02/08/2021 13:45:37 PAGE 2   

  55   1              // int i;
  56   1      //Send cmd through SPI ...
  57   1      SS = 0;
  58   1          SPDR = W_TX_PAYLOAD;
  59   1          while (!(SPSR & SET_BIT7))
  60   1              ;
  61   1          clr_SPIF;
  62   1      
  63   1          //Send the payload
  64   1      //        for(i=0;i<32;i++)
  65   1      //        {
  66   1               SPDR = payload;
  67   1          while (!(SPSR & SET_BIT7))
  68   1              ;
  69   1          clr_SPIF;
  70   1      //         }
  71   1      //Work is done,return to the idle state.
  72   1      SS = 1;
  73   1      }
  74          
  75          void flush_TX_FIFO()
  76          { 
  77   1      //Send cmd through SPI ...
  78   1      SS = 0;
  79   1          SPDR = FLUSH_TX;
  80   1          while (!(SPSR & SET_BIT7))
  81   1              ;
  82   1          clr_SPIF;
  83   1      //Work is done,return to the idle state.
  84   1      SS = 1;
  85   1      }
  86          
  87          void flush_RX_FIFO()
  88          {
  89   1          //Send cmd through SPI ...
  90   1          SS = 0;
  91   1          SPDR = FLUSH_RX;
  92   1          while (!(SPSR & SET_BIT7))
  93   1              ;
  94   1          clr_SPIF;
  95   1          //Work is done,return to the idle state.
  96   1      SS = 1;
  97   1      }
  98          
  99          //Switch XN297L from power down mode to TX mode.
 100          void PWR_DN_mode_to_TX_mode()
 101          {
 102   1      //Template:
 103   1      //CONFIG_mapping=EN_PM|MASK_RX_DR|MASK_TX_DS|MASK_MAX_RT|EN_CRC|CRCO|PWR_UP|PRIM_RX;
 104   1      //CONFIG_mapping = EN_PM | MASK_TX_DS | PWR_UP;
 105   1      CONFIG_mapping = EN_PM | MASK_RX_DR | MASK_MAX_RT | PWR_UP;
 106   1      //CONFIG_mapping = EN_PM  | PWR_UP;
 107   1      //Enable crystal oscillator
 108   1      //Enable power management module
 109   1      //The module is configured as transmitter.
 110   1      //An active low interrupt will generate on IRQ pin after data sent.
 111   1      
 112   1      //Send through SPI...
 113   1      SS = 0;
 114   1      //Send the command sequentially according to the command-format.
 115   1      //Inform XN297L that the MCU wants to write the register 'CONFIG'
 116   1      //Write to SFDR will start the transmission intantly.
C51 COMPILER V9.01   XN297L                                                                02/08/2021 13:45:37 PAGE 3   

 117   1      SPDR = W_REGISTER + CONFIG;
 118   1      while (!(SPSR & SET_BIT7))
 119   1          ;
 120   1      clr_SPIF;
 121   1      
 122   1      //Send the content
 123   1      SPDR = CONFIG_mapping;
 124   1      while (!(SPSR & SET_BIT7))
 125   1          ;
 126   1      clr_SPIF;
 127   1      
 128   1      //Work is done,return to the idle state.
 129   1      SS = 1;
 130   1      }
 131          
 132          void setup_address_witdth(enum address_width_t addr_wid)
 133          { 
 134   1          switch (addr_wid)
 135   1          {
 136   2          case AW_3_BYTES:
 137   2              SETUP_AW_mapping = AW_3_BYTES;
 138   2              break;
 139   2          case AW_4_BYTES:
 140   2              SETUP_AW_mapping = AW_4_BYTES;
 141   2              break;
 142   2          case AW_5_BYTES:
 143   2              SETUP_AW_mapping = AW_5_BYTES;
 144   2              break;
 145   2          }
 146   1      
 147   1          //Send through SPI...
 148   1          SS = 0;
 149   1          //Send the command sequentially according to the command-format.
 150   1          //Inform XN297L that the MCU wants to write the register 'SETUP_AW'
 151   1          SPDR = W_REGISTER + SETUP_AW;
 152   1          while (!(SPSR & SET_BIT7))
 153   1              ;
 154   1          clr_SPIF;
 155   1          //Send the content
 156   1          SPDR = SETUP_AW_mapping;
 157   1          while (!(SPSR & SET_BIT7))
 158   1              ;
 159   1          clr_SPIF;
 160   1      
 161   1          //Work is done,return to the idle state.
 162   1          SS = 1;
 163   1      }
 164          
 165          //The freq is in MHZ
 166          //Freq range:2400MHZ-2483MHZ
 167          // The channels, which is integer times of 16MHz, such as 2400 MHz, 2416 MHz,
 168          // 2432MHz, 2448 MHz, 2464 MHz, and 2480MHz is not recommended.
 169          // Because of the receiver sensitivity is degraded about 2dB in these channels.
 170          void set_frequency_channel(uint16_t freq)
 171          {
 172   1          RF_CH_mapping = freq - 2400;
 173   1      
 174   1          //Send through SPI...
 175   1          SS = 0;
 176   1          //Send the command sequentially according to the command-format.
 177   1          //Inform XN297L that the MCU wants to write the register 'RF_CH'
 178   1          SPDR = W_REGISTER + RF_CH;
C51 COMPILER V9.01   XN297L                                                                02/08/2021 13:45:37 PAGE 4   

 179   1          while (!(SPSR & SET_BIT7))
 180   1              ;
 181   1          clr_SPIF;
 182   1          //Send the content
 183   1          SPDR = RF_CH_mapping;
 184   1          while (!(SPSR & SET_BIT7))
 185   1              ;
 186   1          clr_SPIF;
 187   1      
 188   1          //Work is done,return to the idle state.
 189   1          SS = 1;
 190   1      }
 191          
 192          void set_spi_data_rate(enum spi_data_rate_t data_rate)
 193          {
 194   1          //Erase the previous data field stored in the variable
 195   1          RF_SETUP_mapping &= 0x3f; //RF_SETUP[7:6]=0;
 196   1          switch (data_rate)
 197   1          {
 198   2          case DR_2MBPS:
 199   2              RF_SETUP_mapping |= DR_2MBPS;
 200   2              break;
 201   2          case DR_1MBPS:
 202   2              RF_SETUP_mapping |= DR_1MBPS;
 203   2              break;
 204   2          case DR_250KBPS:
 205   2              RF_SETUP_mapping |= DR_250KBPS;
 206   2              break;
 207   2          }
 208   1          //Send through SPI...
 209   1          SS = 0;
 210   1          //Send the command sequentially according to the command-format.
 211   1          //Inform XN297L that the MCU wants to write the register 'RF_SETUP'
 212   1          SPDR = W_REGISTER + RF_SETUP;
 213   1          while (!(SPSR & SET_BIT7))
 214   1              ;
 215   1          clr_SPIF;
 216   1          //Send the content
 217   1          SPDR = RF_SETUP_mapping;
 218   1          while (!(SPSR & SET_BIT7))
 219   1              ;
 220   1          clr_SPIF;
 221   1      
 222   1          //Work is done,return to the idle state.
 223   1          SS = 1;
 224   1      }
 225          
 226          /*-------------------------------------------*/
 227          void set_rf_output_power(enum rf_output_power_t output_power)
 228          {
 229   1          //Erase the previous data field stored in the variable
 230   1          RF_SETUP_mapping &= 0xc0; //RF_SETUP[5:0]=0;
 231   1      
 232   1          switch (output_power)
 233   1          {
 234   2          case RF11DBM:
 235   2              RF_SETUP_mapping |= RF11DBM;
 236   2              break;
 237   2          case RF9DBM:
 238   2              RF_SETUP_mapping |= RF9DBM;
 239   2              break;
 240   2          case RF5DBM:
C51 COMPILER V9.01   XN297L                                                                02/08/2021 13:45:37 PAGE 5   

 241   2              RF_SETUP_mapping |= RF5DBM;
 242   2              break;
 243   2          case RF4DBM:
 244   2              RF_SETUP_mapping |= RF4DBM;
 245   2              break;
 246   2          case RF_1DBM:
 247   2              RF_SETUP_mapping |= RF_1DBM;
 248   2              break;
 249   2          case RF_10DBM:
 250   2              RF_SETUP_mapping |= RF_10DBM;
 251   2              break;
 252   2          case RF_23DBM:
 253   2              RF_SETUP_mapping |= RF_23DBM;
 254   2              break;
 255   2          }
 256   1      
 257   1          //Send through SPI...
 258   1          SS = 0;
 259   1          //Send the command sequentially according to the command-format.
 260   1          //Inform XN297L that the MCU wants to write the register 'RF_SETUP'
 261   1          SPDR = W_REGISTER + RF_SETUP;
 262   1          while (!(SPSR & SET_BIT7))
 263   1              ;
 264   1          clr_SPIF;
 265   1          //Send the content
 266   1          SPDR = RF_SETUP_mapping;
 267   1          while (!(SPSR & SET_BIT7))
 268   1              ;
 269   1          clr_SPIF;
 270   1      
 271   1          //Work is done,return to the idle state.
 272   1          SS = 1;
 273   1      }
 274          
 275          /*-------------------------------------*/
 276          //The TX address width should be assigned before setting the address.
 277          //ie. setup_address_witdth(AW_3_BYTES);
 278          void set_TX_address(uint8_t *addr)
 279          {
 280   1          int i;
 281   1      
 282   1          //Send through SPI...
 283   1          SS = 0;
 284   1          //Send the command sequentially according to the command-format.
 285   1          //Inform XN297L that the MCU wants to write the register 'TX_ADDR'
 286   1          SPDR = W_REGISTER + TX_ADDR;
 287   1          while (!(SPSR & SET_BIT7))
 288   1              ;
 289   1          clr_SPIF;
 290   1      
 291   1        //Send the content
 292   1          switch (SETUP_AW_mapping)
 293   1          {
 294   2          case AW_3_BYTES:
 295   2              for (i = 0; i < 3; i++)
 296   2              {
 297   3                  SPDR = addr[i];
 298   3                  while (!(SPSR & SET_BIT7))
 299   3                      ;
 300   3                  clr_SPIF;
 301   3              }
 302   2              break;
C51 COMPILER V9.01   XN297L                                                                02/08/2021 13:45:37 PAGE 6   

 303   2          case AW_4_BYTES:
 304   2              for (i = 0; i < 4; i++)
 305   2              {
 306   3                  SPDR =  addr[i];
 307   3                  while (!(SPSR & SET_BIT7))
 308   3                      ;
 309   3                  clr_SPIF;
 310   3              }
 311   2              break;
 312   2          case AW_5_BYTES:
 313   2              for (i = 0; i < 5; i++)
 314   2              {
 315   3                  SPDR =  addr[i];
 316   3                  while (!(SPSR & SET_BIT7))
 317   3                      ;
 318   3                  clr_SPIF;
 319   3              }
 320   2              break;
 321   2          }
 322   1      
 323   1           //Work is done,return to the idle state.
 324   1          SS = 1;
 325   1      }
 326          
 327           //After the data sent interrupt is generated,the interrupt flag
 328          //should be cleared in order to generate a new one.
 329          void clr_data_sent_interrupt_flag()
 330          {
 331   1      STATUS_mapping |= TX_DS; //Write 1 to clear the interrupt.
 332   1      
 333   1          //Send through SPI...
 334   1          SS = 0;
 335   1          //Send the command sequentially according to the command-format.
 336   1          //Inform XN297L that the MCU wants to write the register 'STATUS'
 337   1          SPDR = W_REGISTER + STATUS;
 338   1          while (!(SPSR & SET_BIT7))
 339   1              ;
 340   1          clr_SPIF;
 341   1          //Send the content
 342   1          SPDR = STATUS_mapping;
 343   1          while (!(SPSR & SET_BIT7))
 344   1              ;
 345   1          clr_SPIF;
 346   1      
 347   1          //Work is done,return to the idle state.
 348   1          SS = 1;
 349   1      }
 350          
 351          void clr_MAX_RT_interrupt_flag()
 352          {
 353   1      STATUS_mapping |= MAX_RT; //Write 1 to clear the interrupt.
 354   1      
 355   1          //Send through SPI...
 356   1          SS = 0;
 357   1          //Send the command sequentially according to the command-format.
 358   1          //Inform XN297L that the MCU wants to write the register 'STATUS'
 359   1          SPDR = W_REGISTER + STATUS;
 360   1          while (!(SPSR & SET_BIT7))
 361   1              ;
 362   1          clr_SPIF;
 363   1          //Send the content
 364   1          SPDR = STATUS_mapping;
C51 COMPILER V9.01   XN297L                                                                02/08/2021 13:45:37 PAGE 7   

 365   1          while (!(SPSR & SET_BIT7))
 366   1              ;
 367   1          clr_SPIF;
 368   1      
 369   1          //Work is done,return to the idle state.
 370   1          SS = 1;
 371   1      }
 372          
 373          void config_BB_CAL()
 374          {
 375   1          int i;
 376   1          //Send through SPI...
 377   1          SS = 0;
 378   1          //Send the command sequentially according to the command-format.
 379   1          //Inform XN297L that the MCU wants to write the register 'BB_CAL'
 380   1          SPDR = W_REGISTER + BB_CAL;
 381   1          while (!(SPSR & SET_BIT7))
 382   1              ;
 383   1          clr_SPIF;
 384   1        //Send the content
 385   1              for (i = 0; i < 5; i++)
 386   1              {
 387   2                  SPDR = BB_cal_data[i];
 388   2                  while (!(SPSR & SET_BIT7))
 389   2                      ;
 390   2                  clr_SPIF;
 391   2              }
 392   1           //Work is done,return to the idle state.
 393   1          SS = 1;
 394   1      }
 395          
 396          void config_RF_CAL()
 397          {
 398   1          int i;
 399   1          //Send through SPI...
 400   1          SS = 0;
 401   1          //Send the command sequentially according to the command-format.
 402   1          //Inform XN297L that the MCU wants to write the register 'RF_CAL'
 403   1          SPDR = W_REGISTER + RF_CAL;
 404   1          while (!(SPSR & SET_BIT7))
 405   1              ;
 406   1          clr_SPIF;
 407   1        //Send the content
 408   1              for (i = 0; i < 3; i++)
 409   1              {
 410   2                  SPDR = RF_cal_data[i];
 411   2                  while (!(SPSR & SET_BIT7))
 412   2                      ;
 413   2                  clr_SPIF;
 414   2              }
 415   1           //Work is done,return to the idle state.
 416   1          SS = 1;
 417   1      }
 418          
 419          void config_RF_CAL2()
 420          {
 421   1          int i;
 422   1          //Send through SPI...
 423   1          SS = 0;
 424   1          //Send the command sequentially according to the command-format.
 425   1          //Inform XN297L that the MCU wants to write the register 'RF_CAL2'
 426   1          SPDR = W_REGISTER + RF_CAL2;
C51 COMPILER V9.01   XN297L                                                                02/08/2021 13:45:37 PAGE 8   

 427   1          while (!(SPSR & SET_BIT7))
 428   1              ;
 429   1          clr_SPIF;
 430   1        //Send the content
 431   1              for (i = 0; i < 6; i++)
 432   1              {
 433   2                  SPDR = RF_cal2_data[i];
 434   2                  while (!(SPSR & SET_BIT7))
 435   2                      ;
 436   2                  clr_SPIF;
 437   2              }
 438   1           //Work is done,return to the idle state.
 439   1          SS = 1;
 440   1      }
 441          
 442          void config_DEM_CAL()
 443          {
 444   1          //Send through SPI...
 445   1          SS = 0;
 446   1          //Send the command sequentially according to the command-format.
 447   1          //Inform XN297L that the MCU wants to write the register 'DEM_CAL'
 448   1          SPDR = W_REGISTER + DEM_CAL;
 449   1          while (!(SPSR & SET_BIT7))
 450   1              ;
 451   1          clr_SPIF;
 452   1        //Send the content
 453   1                  SPDR = Dem_cal_data[0];
 454   1                  while (!(SPSR & SET_BIT7))
 455   1                      ;
 456   1                  clr_SPIF;
 457   1      
 458   1           //Work is done,return to the idle state.
 459   1          SS = 1;
 460   1      }
 461          
 462          void config_DEM_CAL2()
 463          {
 464   1          int i;
 465   1          //Send through SPI...
 466   1          SS = 0;
 467   1          //Send the command sequentially according to the command-format.
 468   1          //Inform XN297L that the MCU wants to write the register 'DEM_CAL2'
 469   1          SPDR = W_REGISTER + DEM_CAL2;
 470   1          while (!(SPSR & SET_BIT7))
 471   1              ;
 472   1          clr_SPIF; 
 473   1        //Send the content
 474   1              for (i = 0; i < 3; i++)
 475   1              {
 476   2                  SPDR = Dem_cal2_data[i];
 477   2                  while (!(SPSR & SET_BIT7))
 478   2                      ;
 479   2                  clr_SPIF;
 480   2              }
 481   1           //Work is done,return to the idle state.
 482   1          SS = 1;
 483   1      }
 484          
 485          void XN297L_software_reset()
 486          {
 487   1          //Send cmd through SPI...
 488   1          SS = 0;
C51 COMPILER V9.01   XN297L                                                                02/08/2021 13:45:37 PAGE 9   

 489   1          SPDR = RST_FSPI;
 490   1          while (!(SPSR & SET_BIT7))
 491   1              ;
 492   1          clr_SPIF;
 493   1          //Send the content
 494   1          SPDR = 0x5a;
 495   1          while (!(SPSR & SET_BIT7))
 496   1              ;
 497   1          clr_SPIF;
 498   1          //Work is done,return to the idle state.
 499   1          SS = 1;
 500   1      }
 501          
 502          void XN297L_reset_release()
 503          {
 504   1        //Send cmd through SPI...
 505   1          SS = 0;
 506   1          SPDR = RST_FSPI;
 507   1          while (!(SPSR & SET_BIT7))
 508   1              ;
 509   1          clr_SPIF;
 510   1          //Send the content
 511   1          SPDR = 0xa5;
 512   1          while (!(SPSR & SET_BIT7))
 513   1              ;
 514   1          clr_SPIF;
 515   1          //Work is done,return to the idle state.
 516   1          SS = 1;
 517   1      }
 518          
 519          
 520          void clear_STATUS_register()
 521          {       STATUS_mapping=RX_DR|TX_DS|MAX_RT;
 522   1         //Send through SPI...
 523   1          SS = 0;
 524   1          //Send the command sequentially according to the command-format.
 525   1          //Inform XN297L that the MCU wants to write the register 'STATUS'
 526   1          SPDR = W_REGISTER + STATUS;
 527   1          while (!(SPSR & SET_BIT7))
 528   1              ;
 529   1          clr_SPIF;
 530   1          //Send the content
 531   1          SPDR = STATUS_mapping;
 532   1          while (!(SPSR & SET_BIT7))
 533   1              ;
 534   1          clr_SPIF;
 535   1      
 536   1          //Work is done,return to the idle state.
 537   1          SS = 1;
 538   1      }
 539          
 540          void disable_pipe0_auto_ack()
 541          {
 542   1          //EN_AA_mapping=ENAA_P5|ENAA_P4|ENAA_P3|ENAA_P2|ENAA_P1|ENAA_P0;
 543   1          EN_AA_mapping=0;
 544   1        //Send through SPI...
 545   1          SS = 0;
 546   1          //Send the command sequentially according to the command-format.
 547   1          //Inform XN297L that the MCU wants to write the register 'EN_AA'
 548   1          SPDR = W_REGISTER + EN_AA;
 549   1          while (!(SPSR & SET_BIT7))
 550   1              ;
C51 COMPILER V9.01   XN297L                                                                02/08/2021 13:45:37 PAGE 10  

 551   1          clr_SPIF;
 552   1          //Send the content
 553   1          SPDR = EN_AA_mapping;
 554   1          while (!(SPSR & SET_BIT7))
 555   1              ;
 556   1          clr_SPIF;
 557   1      
 558   1          //Work is done,return to the idle state.
 559   1          SS = 1;
 560   1      }
 561          
 562          
 563          void disable_auto_retransmit()
 564          {
 565   1          SETUP_RETR_mapping=ARD|ARC;
 566   1        //Send through SPI...
 567   1          SS = 0;
 568   1          //Send the command sequentially according to the command-format.
 569   1          //Inform XN297L that the MCU wants to write the register 'SETUP_RETR'
 570   1          SPDR = W_REGISTER + SETUP_RETR;
 571   1          while (!(SPSR & SET_BIT7))
 572   1              ;
 573   1          clr_SPIF;
 574   1          //Send the content
 575   1          SPDR = SETUP_RETR_mapping;
 576   1          while (!(SPSR & SET_BIT7))
 577   1              ;
 578   1          clr_SPIF;
 579   1      
 580   1          //Work is done,return to the idle state.
 581   1          SS = 1;
 582   1      }
 583          
 584          
 585          
 586          
 587          
 588          
 589          
 590          
 591          
 592          
 593          
 594          
 595          
 596          
 597          
 598          
 599          
 600          
 601          
 602          
 603          
 604          
 605          
 606          
 607          
 608          
 609          
 610          
 611          
 612          
C51 COMPILER V9.01   XN297L                                                                02/08/2021 13:45:37 PAGE 11  



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    904    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     36       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
